{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Part-Time/Undangan/undangan-digital/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAChB","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///C:/Part-Time/Undangan/undangan-digital/src/app/api/tamu/%5Bkode%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/db\"; // atau \"@/lib/prisma\" jika sesuai\r\n\r\n// GET: /api/tamu/[kode]\r\nexport async function GET(req: Request, context: { params: { kode: string } }) {\r\n  const { kode } = context.params;\r\n\r\n  const tamu = await prisma.tamu.findUnique({\r\n    where: { kode },\r\n  });\r\n\r\n  if (!tamu) {\r\n    return NextResponse.json({ error: \"Not Found\" }, { status: 404 });\r\n  }\r\n\r\n  return NextResponse.json(tamu);\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA,sMAA+B,kCAAkC;;;AAG1D,eAAe,IAAI,GAAY,EAAE,OAAqC;IAC3E,MAAM,EAAE,IAAI,EAAE,GAAG,QAAQ,MAAM;IAE/B,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACxC,OAAO;YAAE;QAAK;IAChB;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAY,GAAG;YAAE,QAAQ;QAAI;IACjE;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}}]
}